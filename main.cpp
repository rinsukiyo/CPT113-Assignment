//
// Created by rinsuki on 11/05/2022.
//
#include "Student.h"

#include <iostream>
#include <fstream>
#include <string>

// Prototype
void welc();
void getFileLines(short &);
void inputValidation(int &, string &, bool &,
                     short &, short &, short &,
                     bool &, bool &);

int main()
{
    // Variable Definition
    int matricNum = 111111;

    short desa = 0,
          insuranceLevel = 0,
          parkingTimes = 0,
          lineOfFile = 0;

    bool isInt = true,
         isFullyVaccinated = false,
         isFreshman = true;

    double acadFee = 0.0,
           basicCost = 0.0,
           totalIntl = 0.0,
           total = 0.0;

    string major = "default";

    // Welcome
    welc();

    // Get the number of the lines of 'Student.txt', which is the number of the students
    getFileLines(lineOfFile);

    // Open the file of data
    ifstream infile;
    infile.open("./Student.txt");

    // Check if the file is opened correctly
    if (infile.is_open()) {

        // Open the file for outputting
        ofstream outfile;
        outfile.open("./Output.txt");
        outfile << "Generated by Fee Calculator.\n"
                << "Academic Fees - Tuition Fee, (Non-)recurrent Fees.\n"
                << "Basic Costs -  Desa Fee, Insurance Fee, Parking Fee.\n"
                << "Costs for international students - Visa Fee, Quarantine Fee.\n"
                << "Designed with love by Group 2 for CPT113.\n" << endl;

        Student obj[lineOfFile];

        // Read input from a text file
        for (int numOfStudents = 0; numOfStudents < lineOfFile; numOfStudents++) {

            // Save the data to the variables
            if (infile.is_open()) {
                infile >> matricNum;
                infile >> major;
                infile >> isFreshman; // class Tuition

                infile >> desa;
                infile >> insuranceLevel;
                infile >> parkingTimes; // class Desa

                infile >> isInt;
                infile >> isFullyVaccinated; // class Intl

                // Do the input Validation
                inputValidation(matricNum, major, isFreshman,
                                desa, insuranceLevel, parkingTimes,
                                isInt, isFullyVaccinated);

                // Array of Object
                obj[numOfStudents].setValue(isFreshman, major, // class Tuition
                                            desa, insuranceLevel, parkingTimes, // class Desa
                                            isInt, isFullyVaccinated); // class Intl

                obj[numOfStudents].passForTuition();
                obj[numOfStudents].passForDesa();
                obj[numOfStudents].callForIntl();
                obj[numOfStudents].calcTotalFee();
                obj[numOfStudents].passValueBack(acadFee, basicCost, totalIntl, total);
                // Array of Object END

                // Output the personal information of the student and the fees
                outfile << "Student #" << numOfStudents + 1 << endl;
                outfile << "Matric Number: " << matricNum << endl;
                outfile << "Major: " << major << endl;

                outfile << "Student Type: ";
                if (isInt) {
                    outfile << "International" << endl;
                    outfile << "Visa, and quarantine fees (if any): " << totalIntl << " MYR" << endl;
                }
                else outfile << "Local" << endl;

                outfile << "Academic Fees: " << acadFee << " MYR" << endl;
                outfile << "Basic Costs: " << basicCost << " MYR" << endl;
                outfile << "Totally, the student needs to pay " << total << " MYR for the semester.\n" << endl;
                // Output END

            } else {
                std::cout << "Completed! Thanks for using.\n";
                break;
            }
        }
    } else std::cout << "Please check if it exists, "
                << "and if the program has permission to access it." << endl;



    return 0;
}

// Functions
void welc() {
    std::cout << "Welcome to use the Fee Calculator designed by Group 2 for Assignment 1 of CPT113!\n"
              << "This program may help you convert the choices of students to respective required amounts.\n"
              << "For example, it can convert the initial data '1' for desa to '600', "
              << "which means renting for a semester (5 months estimated), 150 per month.\n"
              << "Kindly press ENTER to start.";

    cin.get();
}

// Get the lines of 'Student.txt'
void getFileLines(short &line) {
    string temp;

    ifstream file;
    file.open("./Student.txt");

    if (file.is_open()) {
        while (!file.eof()) {
            getline(file, temp);
            line++;
        }
    } else std::cout << "Unable to open the file: Student.txt" << endl;


    file.close();
}

void inputValidation(int &matric, string &maj, bool &freshman,
                     short &desa, short &insurance, short &parking,
                     bool &intl, bool &vac) {

    // Matric Num (int, 0-999999)
    while (matric < 0 || matric > 999999) {
        std::cout << "Invalid matriculation number. Please re-enter (0-999999): ";
        cin >> matric;  // Re-enter the matriculation number
    }

    // NEW! Major (string)
    while (maj == "default") {
        std::cout << "Invalid major. Please enter a correct major (For example, CS): ";
        cin >> maj;
    }

    // Freshman? (bool, 0/1)
    while (freshman != 0 && freshman != 1) {
        std::cout << "Is " << matric << " a freshman? Please re-enter (0 - No, 1 - Yes): ";
        cin >> freshman;  // Re-enter whether a freshman
    }

    // Hostel Type (int, 0, 1-4)
    while (desa < 0 || desa > 4) {
        std::cout << "Invalid desa type for " << matric << ". Please re-enter (0-4): ";
        cin >> desa;  // Re-enter the hostel type
    }

    // Insurance Level (int, 0, 1-5)
    while (insurance < 0 || insurance > 5) {
        std::cout << "Invalid insurance level for " << matric << " . Please re-enter (0-5): ";
        cin >> insurance;  // Re-enter the insurance level
    }

    // Parking Times (int, 0, 1-100)
    while (parking < 0 || parking > 100) {
        std::cout << "Invalid parking times for " << matric << " . Please re-enter (0-100): ";
        cin >> parking;
    }

    // International student? (bool, 0/1)
    while (intl != 0 && intl != 1) {
        std::cout << "Is " << matric << " an international student? Please re-enter (0 - No, 1 - Yes): ";
        cin >> intl;  // Re-enter whether international student
    }

    // Fully Vaccinated? (bool, 0/1)
    while (vac != 0 && vac != 1) {
        std::cout << "Invalid vaccination status. Please re-enter (0 - Not Completed, 1 - Full): ";
        cin >> vac;  // Re-enter whether fully vaccinated
    }
}
